#define WIN32_LEAN_AND_MEAN
#include <windows.h>
#include <winsock.h>
#include <stdio.h>
#pragma comment(lib,"ws2_32.lib")

//用一个简单的数据结构来在服务端和客户端传递消息
//注意：客户端和服务端之间的字节顺序需要一致
struct DataPackage
{
	int age;
	char name[32];
};


//SOCKET数据报文 == 包头 + 包体
enum CMD
{
	CMD_LOGIN,
	CMD_LOGOUT,
	CMD_ERROR,
};


struct DataHeader
{
	short dataLength;
	short cmd;
};


struct Login
{
	char username[32];
	char password[32];
};

struct LogResult
{
	int result;
};

struct Logout
{
	char username[32];
};

struct LogoutResult
{
	int result;
};




int main()
{
	//建立windows socket 的编程环境
	WORD ver = MAKEWORD(2, 2);
	WSADATA dat;
	WSAStartup(ver, &dat);

	//------服务端（后端）实现步骤6步或7步
	//1.--创建一个socket
	SOCKET sock;
	//创建一个面向数据流的套接字(socket-->stream)
	sock = ::socket(AF_INET, SOCK_STREAM, 0);
	//2.--绑定一个socket（绑定服务器的IP和端口）
	sockaddr_in sock_addr;
	sock_addr.sin_family = AF_INET;
	sock_addr.sin_port = htons(8080);//主机字节序转到网络的字节序
	sock_addr.sin_addr.S_un.S_addr = INADDR_ANY;

	if (SOCKET_ERROR == ::bind(sock, (sockaddr*)&sock_addr, sizeof(sock_addr)))
	{
		//绑定时报
		printf("...绑定失败...\n");
	}
	else
	{
		printf("成功绑定\n");
	}
	//3.--启动服务器的监听模式
	if (SOCKET_ERROR == ::listen(sock, 256))
	{
		printf("监听网络端口失败\n");
	}
	else
	{
		printf("监听网络端口成功\n");
	}
	//4.--等待客户端（前端）的连接
	sockaddr_in client_addr;
	int accept_len = sizeof(sockaddr_in);
	SOCKET real_client_sock = INVALID_SOCKET;

	//accept最后一个参数-接收的长度一定不能为0
	real_client_sock = ::accept(sock, (sockaddr*)&client_addr, &accept_len);
	if (real_client_sock == INVALID_SOCKET)
	{
		printf("错误,接受到了无效的客户端SOCKET...\n");
	}
	//不停地等待不同的客户端的连接请求(需要把ACCEPT放在循环的内部)
	//如果ACCEPT放在循环的外面，那么一次连接建立以后，下面的循环可以处理不间断的交互
	char recvBuff[256] = {};
	while (true)
	{
		DataHeader data_head;
		//5.接收客户端的数据
		//接收大小为256,而不是128
		int recvLen = recv(real_client_sock, (char*)&data_head, sizeof(DataHeader), 0);
		if (recvLen <= 0)
		{
			printf("客户端已经退出，任务结束\n");
			break;
		}
		else {
			//如果接收缓冲区的大小是发送缓冲区的2倍，那么将连续接收两次，造成一定的困扰
			//printf("收到命令:%s\n", recvBuff);

			printf("收到命令:%d,数据长度:%d \n", data_head.cmd, data_head.dataLength);
			switch (data_head.cmd)
			{
					case CMD_LOGIN:
					{
						Login login = {};
						recv(real_client_sock,(char*)&login, sizeof(Login), 0);
						//忽略区判断用户名和密码是否正确
						LogResult result = {1};
						send(real_client_sock, (char*)&data_head, sizeof(DataHeader), 0);
						send(real_client_sock, (char*)&result, sizeof(LogResult), 0);
					}
					break;
					case CMD_LOGOUT:
					{
						Logout logout = {};//记录是哪个客户退出了
						recv(real_client_sock, (char*)&logout, sizeof(Logout), 0);
						//忽略判断用户名和密码是否正确
						LogoutResult logout_result = {1};
						send(real_client_sock, (char*)&data_head, sizeof(DataHeader), 0);
						send(real_client_sock, (char*)&logout_result, sizeof(LogoutResult), 0);
					}
					break;
					default:
					{
						data_head.cmd = CMD_ERROR;
						send(real_client_sock, (char*)&data_head, sizeof(DataHeader), 0);
					}
					break;
			}
		}


		//测试简单的报文-2019.2.17
#if 0
		//6.处理请求
		if (strcmp(recvBuff,"getInfo") == 0)
		{
			DataPackage dp = {50,"刘德华"};
			int sendLen = send(real_client_sock,(const char*)&dp,sizeof(DataPackage),0);
			if (sendLen < 0)
			{
				printf("发送数据包失败\n");
			}
		}
		else
		{
			char msgBuff[] = "???...";
			int nLen = send(real_client_sock,msgBuff,sizeof(msgBuff)+1,0);
			if (nLen < 0)
			{
				printf("发送数据失败.\n");
			}
		}
#endif
	}

	//6.关闭套接字SOCKET
	closesocket(sock);
	return 0;
}